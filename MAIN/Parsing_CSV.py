'''

    CSV파일의 열 갯수, 행 갯수, 열 이름, 행 데이터를 모두 가져오도록 한다.
    물론 쓰기도 가능하도록.함.

'''
import numpy as np
import pandas as pd
class Open_Csv():
    def __init__(self, Input_Csv_Path:str):
        self.CSV_PATH = Input_Csv_Path

        self.df = None;self.X_len:int = None;self.Y_len:int = None

        self.csv_parsed = None
    def Open_and_Setting(self)-> (list, int, int): # (열_헤더 + 데이터들), , (x길이), (y길이)
        column_list = []

        self.df = pd.read_csv(self.CSV_PATH)

        column_list = list( self.df.columns.values )  # 칼럼 추출

        self.X_len = len(column_list); Y_len = 0 # 가로 세로 길이

        tmp = []
        for index, column_name in enumerate(column_list):
            '''
                칼럼 순차 Get
            '''
            #print(f"{index} -> {column_name}")

            ''' 숫자인 경우에만 숫자로 변환'''
            column_data = str(self.df[column_name])

            tmp_column_data_list = []
            for index2, column_data in enumerate( self.df[column_name] ) :
                '''
                    한 칼럼에 y 길이 만큼 데이터를 모두 가져옴
                '''
                tmp_column_data_list.append(column_data)
            #print(f"{column_name} -> {tmp_column_data_list}" )

            tmp.append(tmp_column_data_list)

            if index == 0:
                # Y의 길이를 초기화 한다.
                self.Y_len = len(tmp_column_data_list)
        # result.append(tmp_column_data_list)
        #print(f"tmp -> {tmp}")

        self.csv_parsed = list(map(list, zip(*tmp)))
        self.csv_parsed.insert(0, column_list)

        #print(f"\ncsv_parsed -> {self.csv_parsed} / X길이: {self.X_len} , Y길이: {self.Y_len} ")
        return self.csv_parsed,self.X_len, self.Y_len

    def Write_to_Csv(self, Input_data:list = None) -> bool:

        if self.csv_parsed == None:
            self.csv_parsed, self.X_len, self.Y_len = self.Open_and_Setting()


        if(self.X_len == None ):
            print("먼저 Open_and_Setting 메서드를 호출해주십시오")
            return False


        ''' 행 길이 검증 '''
        Input_data_X_len = len(Input_data)
        if self.X_len != Input_data_X_len:
            print(" 이전에 구한 CSV의 행의 길이와 다릅니다 ")
            return False

        ''' CSV에 행 넣기 '''
        self.csv_parsed.append(Input_data)
        df = pd.DataFrame(self.csv_parsed)
        df.to_csv(self.CSV_PATH, header=False, index=False)
        return True
    def APPEND_row(self, Input_data: list = None) -> bool:

        if self.csv_parsed == None:
            self.csv_parsed, self.X_len, self.Y_len = self.Open_and_Setting()

        if (self.X_len == None):
            print("먼저 Open_and_Setting 메서드를 호출해주십시오")
            return False

        ''' 행 길이 검증 '''
        if self.X_len != len(Input_data):
            print(" 이전에 구한 CSV의 행의 길이와 다릅니다 ")
            return False

        ''' CSV에 행 넣기 '''
        self.csv_parsed.append(Input_data)
        df = pd.DataFrame(self.csv_parsed)
        df.to_csv(self.CSV_PATH, header=False, index=False)

        return True
    def Output_one_row(self,specified_hint:str = None, index_hint:int = None)->list:
        if self.csv_parsed == None:
            self.csv_parsed, self.X_len, self.Y_len = self.Open_and_Setting()

        if (self.X_len == None):
            print("먼저 Open_and_Setting 메서드를 호출해주십시오")
            return

        for data in self.csv_parsed:
            if data[index_hint] == specified_hint:
                return list(data)
        return None

    def Rewrite_to_Csv(self,Input_data:list = None, is_ALL_change:bool=False, specified_hint:str = None, index_hint:int = None, is_Append_column_data:bool = False, Rewrite_column:bool=False, columns_list_for_Rewrite_column:list=None, is_Append_for_Rewrite_column:bool=None):

        if self.csv_parsed == None:
            self.csv_parsed, self.X_len, self.Y_len = self.Open_and_Setting()

        if (self.X_len == None):
            print("먼저 Open_and_Setting 메서드를 호출해주십시오")
            return False


        ''' 행 길이 검증 '''
        '''안함'''

        if(Rewrite_column):
            if(columns_list_for_Rewrite_column!=None and is_Append_for_Rewrite_column != None):
                self.Rewrite_csv_Columns(columns_list_for_Rewrite_column, is_Append_for_Rewrite_column)
        print(f"Rewrite하기전,, self.csv_parsed->{self.csv_parsed} ")
        for index, data in enumerate(self.csv_parsed):
            if ( index == 0 ): continue # 칼럼명은 스킵

            if (is_Append_column_data == False): # is_Append_column_data 이 False면, 위아래의 row행값을 바꾸는 것 ( 세로로 편집 )
                if(is_ALL_change == False):
                    if specified_hint == None and index_hint == None:
                        return False
                    if data[index_hint] == specified_hint:
                        print(f"CSV편집기 -> 데이터 갱신함.")
                        self.csv_parsed.insert(index, Input_data) # 밀어넣고
                        self.csv_parsed.pop(index+1) # 밀린거 지우기
                else:
                    # 모든 행을 편집한다.
                    self.csv_parsed.insert(index, Input_data)  # 밀어넣고
                    self.csv_parsed.pop(index + 1)  # 밀린거 지우기

            else:
                # is_Append_column_data == True이며, 특정 행의 row값에 더함 ( 가로로 편집 )
                if (is_ALL_change == False):
                    if specified_hint == None and index_hint == None:
                        return False
                    if data[index_hint] == specified_hint:
                        '''기존행에 값을 가로로 추가하는것인데, 이때 csv 칼럼수를 초과하면 큰일임'''
                        data += Input_data
                        self.csv_parsed[index] = data # 한 행에 값을 추가함
                else:
                    # 모든 행을 편집한다.
                    data += Input_data
                    self.csv_parsed[index] = data  # 한 행에 값을 추가함

        print(self.csv_parsed)
        df = pd.DataFrame(self.csv_parsed)
        df.to_csv(self.CSV_PATH, header=False, index=False)
        return True

    def Rewrite_csv_Columns(self, Input_header_data:list=None, is_append:bool=None): # csv 헤더를 추가하거나 줄임
        if self.csv_parsed == None:
            self.csv_parsed, self.X_len, self.Y_len = self.Open_and_Setting()

        if (self.X_len == None):
            print("먼저 Open_and_Setting 메서드를 호출해주십시오")
            return

        if(is_append==None):
            print("칼럼을 늘릴 것인지 아닌자 알려주어야합니다.")
            return

        if(is_append):
            if isinstance(Input_header_data, list):
               for data in Input_header_data:
                   print(data)
                   self.csv_parsed[0].append(data)
            else:
                self.csv_parsed[0].append(Input_header_data)

        else:
            self.csv_parsed[0] = Input_header_data

        '''print(self.csv_parsed)
        df = pd.DataFrame(self.csv_parsed)
        df.to_csv(self.CSV_PATH, header=False, index=False)'''


'''PATH = "SHARE_ai_exe_dataset.csv"
PATH = "VT_analysed.csv"
csv_inst = Open_Csv(PATH)
csv_list, x_len, y_len = csv_inst.Open_and_Setting()
print(f"csv_list -> {csv_list}, x_len -> {x_len} , y_len -> {y_len}")

FILE_SHA256= 'ee51f6c4623c642f58c40794937c6c5a61c2fd6e8382eaba4de0acaa40a7bd7d'
VT_analysed_list = csv_inst.Output_one_row(FILE_SHA256, 0)
print(len(VT_analysed_list[1:len(VT_analysed_list)] ))'''
#csv_inst.Rewrite_csv_Columns(['test'],True)
'''csv_inst.Rewrite_to_Csv(
    Input_data= ['a'],
    is_ALL_change= False,
    specified_hint='악성아님',
    index_hint=2,
    is_Append_column_data=True,

    Rewrite_column= True,
    columns_list_for_Rewrite_column=['abc'],
    is_Append_for_Rewrite_column=True
)'''

'''csv_inst.Rewrite_to_Csv(
    Input_data= ['a'],
    is_ALL_change= True,
    specified_hint=None,
    index_hint=None,
    is_Append_column_data=True,

    Rewrite_column= True,
    columns_list_for_Rewrite_column=['abc'],
    is_Append_for_Rewrite_column=False
)'''


#get.append(['a','b'])
#csv_inst.Write_to_Csv(['a', 'b','c'])
#csv_inst.Rewrite_to_Csv(['a', 'b','x'],'b',1)'''