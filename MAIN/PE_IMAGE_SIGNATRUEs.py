import pefile

pe_malware_api_signature = [ str(apis)+'malware' for apis in ["openprocess",
                               "virtualallocex",
                               "writeprocessmemory",
                               "loadlibrarya",
                               "loadresource",
                               "getprocaddress",
                               "createremotethread",
                               "writefile",
                               "istrcmpia",
                               "readfile",
                               "deletefilea",
                               "copyfilea",
                               "createprocessa",
                               "findfirstfilea",
                               "createprocess",
                               "getwindowsdirectory",
                               "regsetvalueexa",
                               "regenumvaluea",
                               "regdeletekeya",
                               "regcreatekeyexa",
                               "openprocesstoken",
                               "cryptcreatehash",
                               "crypthashdata",
                               "cryptgethashparam",
                               "cryptacquirecontexta",
                               "writefile",
                               "readfile",
                               "createfile",
                               "copyfile",
                               "movefile",
                               "ntquerydirectoryfile",
                               "createfilea",
                               "createfilew",
                               "loadlibrary",
                               "createthread",
                               "resumethread",
                               "createremotethread",
                               "mouse_event",
                               "keybd_event",
                               "getasynckeystate",
                               "attachthreadinput",
                               "internetwritefile",
                               "internetconnect",
                               "internetopenurl",
                               "internetreadfile",
                               "wsastartup",
                               "gethostbyname",
                               "gethostbyaddr",
                               "socket",
                               "send_recv",
                               "inet_addr",
                               "bind",
                               "connect",
                               "accept",
                               "connectnamepipe",
                               "urldownloadtofile",
                               "netshareenum",
                               "ftpopenfile",
                               "ftpgetfilesize",
                               "shellexecute",
                               "sfcterminatewatcherthread",
                               "samqueryinformationuse",
                               "openmutex",
                               "outputdebugstring",
                               "isntadmin",
                               "iswow64process",
                               "virtualallocex",
                               "virtualprotectex",
                               "writeprocessmemory"

]]

'''hex기반 text 탐지'''
signature_text = [b'windows', b'Windows', b'telnet', b'Telnet', b'ssh', b'Ssh', b'SSH', b'ftp', b'ftp',
                               b'ftp-server', b'FTP-Server',
                               b'rdp', b'rdp.exe', b'RDP', b'C:\\', b'C:\\Windows', b'hosts.exe', b'Hosts.exe',
                               b'regedit', b'Regedit.exe', b'Registry', b'registry',
                               b'appdata', b'AppData', b'APPDATA', b'%AppData%', b'%appdata%', b'Program',
                               b'Programs',
                               b'Program Files', b'Program Files (x86)',
                               b'C:\\Users', b'Users', b'User', b'users', b'C:\\Users\\Administrator',
                               b'administrator',
                               b'Administrator', b'admin']
def Getting_Dll_API_SECTION(pefile_instance:pefile.PE)->( list, list, list ): # DLL, API, SECTION 추출


    DLL_list_from_pe = []
    API_list_from_pe = []
    SECTION_list_from_pe = []

    try:
        for data in pefile_instance.DIRECTORY_ENTRY_IMPORT:
            # print(data.dll.decode("utf8"))
            #if not data.dll.decode("utf8") in self.dll_list:
                #dll_list.append(data.dll.decode("utf8"))
            DLL_list_from_pe.append( data.dll.decode("utf8") )

            for imports_data in data.imports:
                # print(f'{x} >> {imports_data.name}')
                if imports_data.name == None:
                    continue
                #if not imports_data.name.decode("utf8") in self.apis:
                    #self.apis.append(imports_data.name.decode('utf8'))
                API_list_from_pe.append( imports_data.name.decode('utf8') )
    except:
        print('DIRECTORY_ENTRY_IMPORT 가 없음!')

    for i in pefile_instance.sections:
        name = str(i.Name.decode("utf8")).strip('\x00')
        # print(f'{x} >> {name}')
        #if not name in self.section_name_list:
            #self.section_name_list.append(name)
        SECTION_list_from_pe.append(name)


    return DLL_list_from_pe, API_list_from_pe, SECTION_list_from_pe

def Getting_PE_HEADER(pefile_instance:pefile.PE)->(list): # 총 추출 한 거
    VA = [i.VirtualAddress for i in pefile_instance.OPTIONAL_HEADER.DATA_DIRECTORY]
    Sz = [i.Size for i in pefile_instance.OPTIONAL_HEADER.DATA_DIRECTORY]

    if len(VA) == 15:
        VA += [0]
    if len(Sz) == 15:
        Sz += [0]

    signature_pe_obj = [  # [i.VirtualAddress for i in self.pe.OPTIONAL_HEADER.DATA_DIRECTORY],
        # [i.Size for i in self.pe.OPTIONAL_HEADER.DATA_DIRECTORY],
        VA, Sz,

        pefile_instance.DOS_HEADER.e_magic, pefile_instance.DOS_HEADER.e_cblp, pefile_instance.DOS_HEADER.e_cp,
        pefile_instance.DOS_HEADER.e_crlc,
        pefile_instance.DOS_HEADER.e_cparhdr, pefile_instance.DOS_HEADER.e_minalloc,
        pefile_instance.DOS_HEADER.e_maxalloc,
        pefile_instance.DOS_HEADER.e_ss, pefile_instance.DOS_HEADER.e_sp, pefile_instance.DOS_HEADER.e_csum,
        pefile_instance.DOS_HEADER.e_ip,
        pefile_instance.DOS_HEADER.e_cs, pefile_instance.DOS_HEADER.e_lfarlc, pefile_instance.DOS_HEADER.e_oemid,
        pefile_instance.DOS_HEADER.e_oeminfo,
        pefile_instance.DOS_HEADER.e_lfanew,

        pefile_instance.FILE_HEADER.Machine, pefile_instance.FILE_HEADER.NumberOfSections,
        pefile_instance.FILE_HEADER.PointerToSymbolTable, pefile_instance.FILE_HEADER.NumberOfSymbols,
        pefile_instance.FILE_HEADER.SizeOfOptionalHeader, pefile_instance.FILE_HEADER.Characteristics,

        pefile_instance.OPTIONAL_HEADER.Magic, pefile_instance.OPTIONAL_HEADER.MajorLinkerVersion,
        pefile_instance.OPTIONAL_HEADER.MinorLinkerVersion, pefile_instance.OPTIONAL_HEADER.SizeOfCode,
        pefile_instance.OPTIONAL_HEADER.SizeOfInitializedData,
        pefile_instance.OPTIONAL_HEADER.SizeOfUninitializedData,
        pefile_instance.OPTIONAL_HEADER.AddressOfEntryPoint, pefile_instance.OPTIONAL_HEADER.BaseOfCode,
        pefile_instance.OPTIONAL_HEADER.ImageBase, pefile_instance.OPTIONAL_HEADER.SectionAlignment,
        pefile_instance.OPTIONAL_HEADER.FileAlignment,
        pefile_instance.OPTIONAL_HEADER.MajorOperatingSystemVersion,
        pefile_instance.OPTIONAL_HEADER.MinorOperatingSystemVersion,
        pefile_instance.OPTIONAL_HEADER.MajorImageVersion,
        pefile_instance.OPTIONAL_HEADER.MinorImageVersion,
        pefile_instance.OPTIONAL_HEADER.MajorSubsystemVersion,
        pefile_instance.OPTIONAL_HEADER.MinorSubsystemVersion, pefile_instance.OPTIONAL_HEADER.Reserved1,
        pefile_instance.OPTIONAL_HEADER.SizeOfImage, pefile_instance.OPTIONAL_HEADER.SizeOfHeaders,
        pefile_instance.OPTIONAL_HEADER.CheckSum, pefile_instance.OPTIONAL_HEADER.Subsystem,
        pefile_instance.OPTIONAL_HEADER.DllCharacteristics,
        pefile_instance.OPTIONAL_HEADER.SizeOfStackReserve,
        pefile_instance.OPTIONAL_HEADER.SizeOfStackCommit,
        pefile_instance.OPTIONAL_HEADER.SizeOfHeapReserve,
        pefile_instance.OPTIONAL_HEADER.SizeOfHeapCommit,
        pefile_instance.OPTIONAL_HEADER.LoaderFlags, pefile_instance.OPTIONAL_HEADER.NumberOfRvaAndSizes
    ]

    ''' 리스트 중간에 리스트가 있으면 그것을 풀어야하므로, 마지막 return하기 위한 변수로 재작성한다. '''
    sig = []
    [sig.extend(i) if isinstance(i, list) else sig.append(i) for i in
     signature_pe_obj]

    #print(len(sig))
    return sig