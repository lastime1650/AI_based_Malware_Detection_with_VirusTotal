import requests
import json
import pyzipper,io # 압축해제용
import os
class Malware_Bazaar_Manager():

    QUERY_FILE_TYPE = 0

    def __init__(self, API:str=None):
        if API==None :
            print("Malware_Bazaar API를 입력하세요")
            return None
        self.API_for_Header = {"API-KEY":API}
        self.API_url = "https://mb-api.abuse.ch/api/v1/"


    def Get_Samples(self, file_type:str="exe", Get_Count:int = 20) -> list :# 파일 샘플을 file_type에 따라 가져옴
        if Get_Count > 1000: print("1000을 초과할 수 없음"); return

        data = { 'query': 'get_file_type', 'file_type':file_type, 'limit':f"{Get_Count}"}

        while True:
            try:
                response = requests.post(
                    url= self.API_url,
                    data = data,
                    verify=False,
                    headers=self.API_for_Header
                )

                JSON_FILE = json.loads(response.text) # 간혹가다 여기서 오류 발생하는 경우 있음.
                print(JSON_FILE)
                break
            except:
                continue # 다시 질의

        return self.Parsing(JSON_FILE, self.QUERY_FILE_TYPE)


    def Get_FILE_bin(self, File_SHA256:str= None, FILE_save_PATH:str=None) -> ( bytes, str ): # SHA256을 전송하고 성공하면 바이너리값과 경로, 실패하면 JSON변환가능.
        '''

        :param File_SHA256: 가져올 파일의 해시값
        :param FILE_save_PATH: 저장경로 없으면 None이며, 리턴할 때도 None임
        :return: 바이너리, 저장경로
        '''

        if File_SHA256 == None:print("SHA256을 주십시오!");return None


        data = {'query': 'get_file', 'sha256_hash': File_SHA256}

        response = requests.post(
            url=self.API_url,
            data=data,
            verify=False,
            headers=self.API_for_Header
        )
        #print(response.text)
        try:
            JSON_FILE = json.loads(response.text)
            print("바이너리를 얻지 못했습니다.")
            return None
        except:
            try:
                FILE_BIN = b''
                result_zipped_data = response.content # 순수 bytes로는 이렇게 가져와야함
                print(f"Zipped된 파일을 성공적으로 가져왔습니다.\n 이제 압축해제해서 가져오겠습니다. ")
                with pyzipper.AESZipFile(io.BytesIO(result_zipped_data)) as ZF:

                    ZF.setpassword("infected".encode()) # 패스워드 설정

                    for file_name in ZF.namelist(): # 메모리에 있음, namelist()에 있음 ( BytesIO() 로 ZIP을 연경우 현재 하나 밖에 없음 )
                        print(f"- {file_name}")
                        with ZF.open(file_name) as file: # 이름으로 열어서 파일 추출
                            FILE_BIN = file.read()
                        break

                if FILE_save_PATH != None:

                    ''' 혹여나 같은 파일이 있을 수 있으므로 검증해야한다.'''
                    FOUND_FILE_NAMES = []
                    for root, dirs, files in os.walk(f"{FILE_save_PATH}"):
                        for file_name in files:
                            #if file_name.endswith(".EXE"):
                            FOUND_FILE_NAMES.append(file_name)

                    print(f"FOUND_FILE_NAMES->{FOUND_FILE_NAMES}")
                    if f"{File_SHA256}_from_malware.exe" in FOUND_FILE_NAMES:
                        print("이미 파일이 존재합니다!")
                        return FILE_BIN, None
                    else:
                        print("파일 쓰기중..")
                        with open(f"{FILE_save_PATH}{File_SHA256}_from_malware.exe", 'wb') as f:
                            f.write(FILE_BIN)

                        return FILE_BIN, f"{FILE_save_PATH}{File_SHA256}_from_malware.exe"
                else:

                    print("파일 쓰기 실패")
                    return FILE_BIN, None


            except:
                print("Zipped를 얻었지만 결국 실패!")
                return None, None
    def Parsing(self, data, parsing_type:int=None) -> list:
        if parsing_type == None : print("API사용후 JSON으로 바꿔, 파라미터로 전달해야하는데 NONE입니다.");return None

        result_list: list = []

        if self.QUERY_FILE_TYPE == parsing_type:
            '''
                리턴 정보 -> 
                [0]: 파일 SHA256
                [1]: 파일 길이
                [2]: 파일 타입
                [3]: 파일 tag
            '''
            #print(self.QUERY_FILE_TYPE, "받았습니다.")
            try:
                if data["query_status"] != "ok":
                    print("[QUERY_FILE_TYPE] - 결과를 성공적으로 받지 못했습니다.")
                    return None
            except:
                print("[QUERY_FILE_TYPE] - 결과를 성공적으로 받지 못했습니다.")
                return None


            try:
                for index, one_FILE_INFO in enumerate( data["data"] ):
                    SHA256 = one_FILE_INFO["sha256_hash"]
                    FILE_SIZE = one_FILE_INFO["file_size"]
                    FILE_TYPE = one_FILE_INFO["file_type"]
                    FILE_TAG = one_FILE_INFO["tags"] # list일 수 있음

                    print(f"{SHA256} / {FILE_SIZE} / {FILE_TYPE} / {FILE_TAG}")
                    result_list.append([SHA256, FILE_SIZE, FILE_TYPE,FILE_TAG])
                return result_list
            except:
                print("[QUERY_FILE_TYPE] 파싱 중 오류 발생!")
                return None

        return result_list

    # 샘플을 요청하고 DISK에 쓰도록함. RETURN --> 저장된 경로를 추출함
    def Make_sample_to_DISK_for_malware_DATASET(self, file_type:str="exe", get_count:int=20,save_path:str=None)->list:
        '''

            [ 어떤 것을 RETURN 하는가? ]
            [0]: 저장성공된 exe 경로


        '''
        if save_path == None: return None

        result_sample_list = self.Get_Samples(
            file_type=file_type,
            Get_Count=get_count
        )

        if result_sample_list == None: print("result_sample_list 가 None임!)");return None
        for_return_list = []
        for one_sample_SHA256 in result_sample_list:
            print(f"one_sample_SHA256->{one_sample_SHA256}")
            '''
                얻어온 샘플 SHA256을 가지고 실제 바이너리를 가져오도록 하는 메서드(DISK에 쓰기도 한다.)
            '''
            result_BIN = self.Get_FILE_bin(
                File_SHA256=str( one_sample_SHA256[0] ),
                FILE_save_PATH=save_path
            )
            if (result_BIN[1] != None):
                for_return_list.append(result_BIN[1])

        print(for_return_list)
        return for_return_list

'''a = Malware_Bazaar_Manager(
    API="Please Input API key~"
)
GET_SAMPLE_list = a.Get_Samples(
    Get_Count=2
)

if GET_SAMPLE_list==None: print("GET_SAMPLE_list 가 None임!"); quit()

for GET_SAMPLE in GET_SAMPLE_list:
    FILE_BIN = a.Get_FILE_bin(
        File_SHA256=GET_SAMPLE[0],
        FILE_save_PATH=None
    )'''
